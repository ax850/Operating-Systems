#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "common.h"
#include "point.h"
#include "sorted_points.h"

struct sorted_points {
	/* you can define this struct to have whatever fields you want. */
	struct point p1;
	double distance = sqrt(x* x + y * y);
	struct sorted_points *next;
} *head;



struct sorted_points *
sp_init()
{
	struct sorted_points *sp;

	sp = (struct sorted_points *)malloc(sizeof(struct sorted_points));
	assert(sp);

	//TBD();
	
	sp->next = NULL;
	head = NULL;
	
	return sp;
}

void
sp_destroy(struct sorted_points *sp)
{
	TBD();
	free(sp);
}

int
sp_add_point(struct sorted_points *sp, double x, double y)
{
	sorted_points *temp = (sorted_points*)malloc(sizeof(struct sorted_points));
	temp -> x = x;
	temp -> y = y;
	temp -> distance = sqrt(x * x + y * y);
	if (head == NULL){
		head = temp;
		temp->next = NULL;
	}
	else{
		struct sorted_points *current = head;
		struct sorted_points *previous = head;
		while (current != NULL){
			if (current-> distance > temp->distance){
				previous->next = temp;
				temp->next = current;
			}
			else if (current->distance == temp->distance){
				if (current->x > temp->x){
					previous->next = temp;
					temp->next = current;
				}
				else if (current->x == temp->x){
					if (current->y > temp ->y){
						previous->next = temp;
						temp->next = current;
					}
				}
			}
			else {
				
				current->next = temp;
			}
			previous = current;
			current = current -> next;
		}
	}
	
	//TBD();
	return 0;
}

int
sp_remove_first(struct sorted_points *sp, struct point *ret)
{
	TBD();
	return 0;
}

int
sp_remove_last(struct sorted_points *sp, struct point *ret)
{
	TBD();
	return 0;
}

int
sp_remove_by_index(struct sorted_points *sp, int index, struct point *ret)
{
	
	TBD();
	return 0;
}

int
sp_delete_duplicates(struct sorted_points *sp)
{
	TBD();
	return -1;
}
